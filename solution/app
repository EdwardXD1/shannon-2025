import base64
import io
import wave
import random
import math

import numpy as np
from fastapi import FastAPI
from pydantic import BaseModel, Field

SAMPLE_RATE = 44_100   # Hz
BIT_DEPTH = 16         # bits per sample
CHANNELS = 1
BIT_DURATION = 0.02
SAMPLES_PER_BIT = int(SAMPLE_RATE * BIT_DURATION)
AMPLITUDE = 16000
FREQ_0 = 1000
FREQ_1 = 2000
PREAMBLE = '10101010'

app = FastAPI(swagger_ui_parameters={"syntaxHighlight": False})


# ---------------------------- pydantic models ---------------------------- #

class EncodeRequest(BaseModel):
    text: str = Field(..., description="Строка для кодирования в звук")
    noise: float = Field(0.0, ge=0.0, le=1.0, description="Уровень шума от 0 до 1")


class EncodeResponse(BaseModel):
    data: str  # base64 wav


class DecodeRequest(BaseModel):
    data: str  # base64 wav
    add_noise: bool = Field(False, description="Имитация зашумлённости при декодировании")


class DecodeResponse(BaseModel):
    text: str


# ---------------------------- helpers ---------------------------- #

def char_to_bits(text):
    return ''.join(f'{ord(c):08b}' for c in text)


def bits_to_char(bits):
    chars = [bits[i:i+8] for i in range(0, len(bits), 8)]
    return ''.join(chr(int(b, 2)) for b in chars if len(b) == 8)


def generate_sine_wave(freq, duration):
    samples = int(SAMPLE_RATE * duration)
    return [int(AMPLITUDE * math.sin(2 * math.pi * freq * t / SAMPLE_RATE)) for t in range(samples)]


def encode_bits_to_audio(bits):
    audio = []
    for bit in bits:
        freq = FREQ_1 if bit == '1' else FREQ_0
        audio.extend(generate_sine_wave(freq, BIT_DURATION))
    return np.array(audio, dtype=np.int16)


def add_gaussian_noise(samples, noise_level):
    if noise_level <= 0.0:
        return samples
    noise = np.random.normal(0, noise_level * AMPLITUDE, size=len(samples))
    noisy = samples + noise
    return np.clip(noisy, -32768, 32767).astype(np.int16)


def get_dominant_freq(samples):
    window = np.hanning(len(samples))
    samples = samples * window
    spectrum = np.fft.fft(samples)
    freqs = np.fft.fftfreq(len(spectrum), 1 / SAMPLE_RATE)
    magnitudes = np.abs(spectrum[:len(spectrum)//2])
    freq = freqs[:len(freqs)//2][np.argmax(magnitudes)]
    return abs(freq)


def decode_audio_to_bits(samples):
    bits = ''
    for i in range(0, len(samples), SAMPLES_PER_BIT):
        frame = samples[i:i + SAMPLES_PER_BIT]
        if len(frame) < SAMPLES_PER_BIT:
            break
        freq = get_dominant_freq(np.array(frame))
        bits += '1' if abs(freq - FREQ_1) < abs(freq - FREQ_0) else '0'
    return bits


def _empty_wav(duration_sec: float = 1.0) -> bytes:
    n_samples = int(SAMPLE_RATE * duration_sec)
    silence = np.zeros(n_samples, dtype=np.int16)
    buf = io.BytesIO()
    with wave.open(buf, "wb") as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(BIT_DEPTH // 8)
        wf.setframerate(SAMPLE_RATE)
        wf.writeframes(silence.tobytes())
    return buf.getvalue()


# ---------------------------- TODO: your logic ---------------------------- #

def text_to_audio(text: str, noise_level: float = 0.0) -> bytes:
    full_bits = PREAMBLE + char_to_bits(text)
    audio_samples = encode_bits_to_audio(full_bits)
    noisy_samples = add_gaussian_noise(audio_samples, noise_level)
    buf = io.BytesIO()
    with wave.open(buf, 'wb') as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(BIT_DEPTH // 8)
        wf.setframerate(SAMPLE_RATE)
        wf.writeframes(noisy_samples.tobytes())
    return buf.getvalue()


def audio_to_text(wav_bytes: bytes, add_noise: bool = False) -> str:
    with io.BytesIO(wav_bytes) as buf:
        with wave.open(buf, 'rb') as wf:
            frames = wf.readframes(wf.getnframes())
            samples = list(np.frombuffer(frames, dtype=np.int16))

    if add_noise:
        samples = add_gaussian_noise(np.array(samples), 0.1)

    raw_bits = decode_audio_to_bits(samples)
    start_index = raw_bits.find(PREAMBLE)

    if start_index != -1:
        raw_bits = raw_bits[start_index + len(PREAMBLE):]
    return bits_to_char(raw_bits)


# ---------------------------- endpoints ---------------------------- #

@app.post("/encode", response_model=EncodeResponse)
async def encode_text(request: EncodeRequest):
    wav_bytes = text_to_audio(request.text)
    wav_base64 = base64.b64encode(wav_bytes).decode("utf-8")
    return EncodeResponse(data=wav_base64)


@app.post("/decode", response_model=DecodeResponse)
async def decode_audio(request: DecodeRequest):
    wav_bytes = base64.b64decode(request.data)
    text = audio_to_text(wav_bytes)
    return DecodeResponse(text=text)


@app.get("/ping")
async def ping():
    return "ok"
